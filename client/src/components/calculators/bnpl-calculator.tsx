import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Loader2, Save, Download } from "lucide-react";

interface BNPLInputs {
  purchaseAmount: string;
  numberOfInstallments: string;
  processingFee: string;
}

interface BNPLResults {
  purchaseAmount: number;
  processingFee: number;
  totalAmount: string;
  numberOfInstallments: number;
  installmentAmount: string;
  schedule: Array<{
    installmentNumber: number;
    amount: string;
    dueDate: string;
  }>;
}

export function BNPLCalculator() {
  const { toast } = useToast();
  const [inputs, setInputs] = useState<BNPLInputs>({
    purchaseAmount: "",
    numberOfInstallments: "4",
    processingFee: "0",
  });
  const [results, setResults] = useState<BNPLResults | null>(null);
  const [email, setEmail] = useState("");

  const calculateMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("/api/calculators/calculate", {
        method: "POST",
        body: JSON.stringify({
          type: "bnpl",
          inputs: {
            purchaseAmount: inputs.purchaseAmount,
            numberOfInstallments: inputs.numberOfInstallments,
            processingFee: inputs.processingFee || "0",
          },
        }),
        headers: { "Content-Type": "application/json" },
      });
      return response.data;
    },
    onSuccess: (data) => {
      setResults(data);
    },
    onError: () => {
      toast({
        title: "Calculation Failed",
        description: "Please check your inputs and try again.",
        variant: "destructive",
      });
    },
  });

  const saveMutation = useMutation({
    mutationFn: async () => {
      await apiRequest("/api/calculators/save", {
        method: "POST",
        body: JSON.stringify({
          calculatorType: "bnpl",
          inputs: JSON.stringify(inputs),
          results: JSON.stringify(results),
          email: email || undefined,
          saved: true,
        }),
        headers: { "Content-Type": "application/json" },
      });
    },
    onSuccess: () => {
      toast({
        title: "Saved Successfully",
        description: "Your calculation has been saved.",
      });
    },
  });

  const handleCalculate = (e: React.FormEvent) => {
    e.preventDefault();
    calculateMutation.mutate();
  };

  const handleSave = () => {
    if (!results) return;
    saveMutation.mutate();
  };

  const handleDownload = () => {
    if (!results) return;
    const content = `
BNPL Payment Schedule
=====================

Purchase Amount: AED ${results.purchaseAmount}
Processing Fee: AED ${results.processingFee}
Total Amount: AED ${results.totalAmount}
Number of Installments: ${results.numberOfInstallments}
Installment Amount: AED ${results.installmentAmount}

Payment Schedule:
${results.schedule.map(s => `Installment #${s.installmentNumber}: AED ${s.amount} - Due: ${s.dueDate}`).join('\n')}

Generated by iamfasih.com/calculators
    `.trim();

    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "bnpl-calculation.txt";
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <form onSubmit={handleCalculate} className="space-y-4">
        <div className="grid md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <Label htmlFor="purchaseAmount">Purchase Amount (AED)</Label>
            <Input
              id="purchaseAmount"
              type="number"
              step="0.01"
              required
              value={inputs.purchaseAmount}
              onChange={(e) => setInputs({ ...inputs, purchaseAmount: e.target.value })}
              placeholder="10000"
              data-testid="input-purchase-amount"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="numberOfInstallments">Number of Installments</Label>
            <Input
              id="numberOfInstallments"
              type="number"
              required
              min="2"
              max="24"
              value={inputs.numberOfInstallments}
              onChange={(e) => setInputs({ ...inputs, numberOfInstallments: e.target.value })}
              data-testid="input-installments"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="processingFee">Processing Fee (AED)</Label>
            <Input
              id="processingFee"
              type="number"
              step="0.01"
              value={inputs.processingFee}
              onChange={(e) => setInputs({ ...inputs, processingFee: e.target.value })}
              placeholder="0"
              data-testid="input-processing-fee"
            />
          </div>
        </div>

        <Button
          type="submit"
          disabled={calculateMutation.isPending}
          className="w-full md:w-auto"
          data-testid="button-calculate"
        >
          {calculateMutation.isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Calculating...
            </>
          ) : (
            "Calculate"
          )}
        </Button>
      </form>

      {results && (
        <Card className="p-6 space-y-6" data-testid="card-results">
          <div>
            <h3 className="text-2xl font-bold mb-4">Payment Summary</h3>
            <div className="grid md:grid-cols-2 gap-4">
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Purchase Amount</p>
                <p className="text-2xl font-bold">AED {results.purchaseAmount.toFixed(2)}</p>
              </div>
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Processing Fee</p>
                <p className="text-2xl font-bold">AED {results.processingFee.toFixed(2)}</p>
              </div>
              <div className="p-4 bg-primary/10 rounded-lg border-2 border-primary">
                <p className="text-sm text-muted-foreground">Total Amount</p>
                <p className="text-2xl font-bold text-primary">AED {results.totalAmount}</p>
              </div>
              <div className="p-4 bg-primary/10 rounded-lg border-2 border-primary">
                <p className="text-sm text-muted-foreground">Per Installment</p>
                <p className="text-2xl font-bold text-primary">AED {results.installmentAmount}</p>
              </div>
            </div>
          </div>

          <div>
            <h4 className="text-lg font-semibold mb-3">Payment Schedule</h4>
            <div className="space-y-2">
              {results.schedule.map((installment) => (
                <div
                  key={installment.installmentNumber}
                  className="flex justify-between items-center p-3 bg-muted rounded-lg"
                >
                  <span className="font-medium">Installment #{installment.installmentNumber}</span>
                  <span className="text-muted-foreground">AED {installment.amount}</span>
                  <span className="text-sm text-muted-foreground">{installment.dueDate}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="flex flex-col sm:flex-row gap-3">
            <div className="flex-1">
              <Input
                type="email"
                placeholder="Enter email to save results"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                data-testid="input-email-save"
              />
            </div>
            <Button onClick={handleSave} disabled={saveMutation.isPending} data-testid="button-save">
              <Save className="mr-2 h-4 w-4" />
              Save Results
            </Button>
            <Button variant="outline" onClick={handleDownload} data-testid="button-download">
              <Download className="mr-2 h-4 w-4" />
              Download
            </Button>
          </div>
        </Card>
      )}
    </div>
  );
}
