import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Loader2, Save, Download } from "lucide-react";

interface MurabahaResults {
  assetCost: string;
  profitRate: number;
  profitAmount: string;
  totalAmount: string;
  tenureMonths: number;
  monthlyInstallment: string;
  effectiveRate: string;
}

export function MurabahaCalculator() {
  const { toast } = useToast();
  const [inputs, setInputs] = useState({
    assetCost: "",
    profitRate: "",
    tenureMonths: "",
  });
  const [results, setResults] = useState<MurabahaResults | null>(null);
  const [email, setEmail] = useState("");

  const calculateMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("/api/calculators/calculate", {
        method: "POST",
        body: JSON.stringify({
          type: "murabaha",
          inputs,
        }),
        headers: { "Content-Type": "application/json" },
      });
      return response.data;
    },
    onSuccess: (data) => {
      setResults(data);
    },
    onError: () => {
      toast({
        title: "Calculation Failed",
        description: "Please check your inputs and try again.",
        variant: "destructive",
      });
    },
  });

  const saveMutation = useMutation({
    mutationFn: async () => {
      await apiRequest("/api/calculators/save", {
        method: "POST",
        body: JSON.stringify({
          calculatorType: "murabaha",
          inputs: JSON.stringify(inputs),
          results: JSON.stringify(results),
          email: email || undefined,
          saved: true,
        }),
        headers: { "Content-Type": "application/json" },
      });
    },
    onSuccess: () => {
      toast({
        title: "Saved Successfully",
        description: "Your calculation has been saved.",
      });
    },
  });

  const handleCalculate = (e: React.FormEvent) => {
    e.preventDefault();
    calculateMutation.mutate();
  };

  const handleDownload = () => {
    if (!results) return;
    const content = `
Murabaha Financing Calculation
===============================

Asset Cost: AED ${results.assetCost}
Profit Rate: ${results.profitRate}%
Profit Amount: AED ${results.profitAmount}
Total Amount: AED ${results.totalAmount}
Tenure: ${results.tenureMonths} months
Monthly Installment: AED ${results.monthlyInstallment}
Effective Rate: ${results.effectiveRate}

Generated by iamfasih.com/calculators
    `.trim();

    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "murabaha-calculation.txt";
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <form onSubmit={handleCalculate} className="space-y-4">
        <div className="grid md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <Label htmlFor="assetCost">Asset Cost (AED)</Label>
            <Input
              id="assetCost"
              type="number"
              step="0.01"
              required
              value={inputs.assetCost}
              onChange={(e) => setInputs({ ...inputs, assetCost: e.target.value })}
              placeholder="100000"
              data-testid="input-asset-cost"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="profitRate">Profit Rate (%)</Label>
            <Input
              id="profitRate"
              type="number"
              step="0.1"
              required
              value={inputs.profitRate}
              onChange={(e) => setInputs({ ...inputs, profitRate: e.target.value })}
              placeholder="15"
              data-testid="input-profit-rate"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="tenureMonths">Tenure (Months)</Label>
            <Input
              id="tenureMonths"
              type="number"
              required
              min="1"
              value={inputs.tenureMonths}
              onChange={(e) => setInputs({ ...inputs, tenureMonths: e.target.value })}
              placeholder="24"
              data-testid="input-tenure"
            />
          </div>
        </div>

        <Button type="submit" disabled={calculateMutation.isPending} className="w-full md:w-auto" data-testid="button-calculate">
          {calculateMutation.isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Calculating...
            </>
          ) : (
            "Calculate"
          )}
        </Button>
      </form>

      {results && (
        <Card className="p-6 space-y-6" data-testid="card-results">
          <div>
            <h3 className="text-2xl font-bold mb-4">Murabaha Financing Summary</h3>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Asset Cost</p>
                <p className="text-2xl font-bold">AED {results.assetCost}</p>
              </div>
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Profit Amount</p>
                <p className="text-2xl font-bold">AED {results.profitAmount}</p>
              </div>
              <div className="p-4 bg-primary/10 rounded-lg border-2 border-primary">
                <p className="text-sm text-muted-foreground">Total Amount</p>
                <p className="text-2xl font-bold text-primary">AED {results.totalAmount}</p>
              </div>
              <div className="p-4 bg-primary/10 rounded-lg border-2 border-primary">
                <p className="text-sm text-muted-foreground">Monthly Installment</p>
                <p className="text-2xl font-bold text-primary">AED {results.monthlyInstallment}</p>
              </div>
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Tenure</p>
                <p className="text-2xl font-bold">{results.tenureMonths} months</p>
              </div>
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Effective Rate</p>
                <p className="text-2xl font-bold">{results.effectiveRate}</p>
              </div>
            </div>
          </div>

          <div className="flex flex-col sm:flex-row gap-3">
            <div className="flex-1">
              <Input
                type="email"
                placeholder="Enter email to save results"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                data-testid="input-email-save"
              />
            </div>
            <Button onClick={() => saveMutation.mutate()} disabled={saveMutation.isPending} data-testid="button-save">
              <Save className="mr-2 h-4 w-4" />
              Save Results
            </Button>
            <Button variant="outline" onClick={handleDownload} data-testid="button-download">
              <Download className="mr-2 h-4 w-4" />
              Download
            </Button>
          </div>
        </Card>
      )}
    </div>
  );
}
