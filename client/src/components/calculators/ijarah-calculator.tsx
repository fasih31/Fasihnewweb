import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Loader2, Save, Download } from "lucide-react";

interface IjarahResults {
  assetValue: string;
  residualValue: string;
  leasePeriodMonths: number;
  monthlyRental: string;
  totalRentals: string;
  totalCost: string;
  savingsVsPurchase: string;
}

export function IjarahCalculator() {
  const { toast } = useToast();
  const [inputs, setInputs] = useState({
    assetValue: "",
    leasePeriodMonths: "",
    residualValue: "",
    profitRate: "",
  });
  const [results, setResults] = useState<IjarahResults | null>(null);
  const [email, setEmail] = useState("");

  const calculateMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("/api/calculators/calculate", {
        method: "POST",
        body: JSON.stringify({
          type: "ijarah",
          inputs,
        }),
        headers: { "Content-Type": "application/json" },
      });
      return response.data;
    },
    onSuccess: (data) => {
      setResults(data);
    },
    onError: () => {
      toast({
        title: "Calculation Failed",
        description: "Please check your inputs and try again.",
        variant: "destructive",
      });
    },
  });

  const saveMutation = useMutation({
    mutationFn: async () => {
      await apiRequest("/api/calculators/save", {
        method: "POST",
        body: JSON.stringify({
          calculatorType: "ijarah",
          inputs: JSON.stringify(inputs),
          results: JSON.stringify(results),
          email: email || undefined,
          saved: true,
        }),
        headers: { "Content-Type": "application/json" },
      });
    },
    onSuccess: () => {
      toast({
        title: "Saved Successfully",
        description: "Your calculation has been saved.",
      });
    },
  });

  const handleCalculate = (e: React.FormEvent) => {
    e.preventDefault();
    calculateMutation.mutate();
  };

  const handleDownload = () => {
    if (!results) return;
    const content = `
Ijarah Lease Calculation
========================

Asset Value: AED ${results.assetValue}
Residual Value: AED ${results.residualValue}
Lease Period: ${results.leasePeriodMonths} months
Monthly Rental: AED ${results.monthlyRental}
Total Rentals: AED ${results.totalRentals}
Total Cost: AED ${results.totalCost}
Savings vs Purchase: AED ${results.savingsVsPurchase}

Generated by iamfasih.com/calculators
    `.trim();

    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "ijarah-calculation.txt";
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <form onSubmit={handleCalculate} className="space-y-4">
        <div className="grid md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="assetValue">Asset Value (AED)</Label>
            <Input
              id="assetValue"
              type="number"
              step="0.01"
              required
              value={inputs.assetValue}
              onChange={(e) => setInputs({ ...inputs, assetValue: e.target.value })}
              placeholder="500000"
              data-testid="input-asset-value"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="residualValue">Residual Value (AED)</Label>
            <Input
              id="residualValue"
              type="number"
              step="0.01"
              required
              value={inputs.residualValue}
              onChange={(e) => setInputs({ ...inputs, residualValue: e.target.value })}
              placeholder="50000"
              data-testid="input-residual-value"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="leasePeriodMonths">Lease Period (Months)</Label>
            <Input
              id="leasePeriodMonths"
              type="number"
              required
              min="1"
              value={inputs.leasePeriodMonths}
              onChange={(e) => setInputs({ ...inputs, leasePeriodMonths: e.target.value })}
              placeholder="60"
              data-testid="input-lease-period"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="profitRate">Profit Rate (%)</Label>
            <Input
              id="profitRate"
              type="number"
              step="0.1"
              required
              value={inputs.profitRate}
              onChange={(e) => setInputs({ ...inputs, profitRate: e.target.value })}
              placeholder="8"
              data-testid="input-profit-rate"
            />
          </div>
        </div>

        <Button type="submit" disabled={calculateMutation.isPending} className="w-full md:w-auto" data-testid="button-calculate">
          {calculateMutation.isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Calculating...
            </>
          ) : (
            "Calculate"
          )}
        </Button>
      </form>

      {results && (
        <Card className="p-6 space-y-6" data-testid="card-results">
          <div>
            <h3 className="text-2xl font-bold mb-4">Ijarah Lease Summary</h3>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Asset Value</p>
                <p className="text-2xl font-bold">AED {results.assetValue}</p>
              </div>
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Residual Value</p>
                <p className="text-2xl font-bold">AED {results.residualValue}</p>
              </div>
              <div className="p-4 bg-primary/10 rounded-lg border-2 border-primary">
                <p className="text-sm text-muted-foreground">Monthly Rental</p>
                <p className="text-2xl font-bold text-primary">AED {results.monthlyRental}</p>
              </div>
              <div className="p-4 bg-muted rounded-lg">
                <p className="text-sm text-muted-foreground">Total Rentals</p>
                <p className="text-2xl font-bold">AED {results.totalRentals}</p>
              </div>
              <div className="p-4 bg-primary/10 rounded-lg border-2 border-primary">
                <p className="text-sm text-muted-foreground">Total Cost</p>
                <p className="text-2xl font-bold text-primary">AED {results.totalCost}</p>
              </div>
              <div className="p-4 bg-green-500/10 rounded-lg border-2 border-green-500">
                <p className="text-sm text-muted-foreground">Savings</p>
                <p className="text-2xl font-bold text-green-500">AED {results.savingsVsPurchase}</p>
              </div>
            </div>
          </div>

          <div className="flex flex-col sm:flex-row gap-3">
            <div className="flex-1">
              <Input
                type="email"
                placeholder="Enter email to save results"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                data-testid="input-email-save"
              />
            </div>
            <Button onClick={() => saveMutation.mutate()} disabled={saveMutation.isPending} data-testid="button-save">
              <Save className="mr-2 h-4 w-4" />
              Save Results
            </Button>
            <Button variant="outline" onClick={handleDownload} data-testid="button-download">
              <Download className="mr-2 h-4 w-4" />
              Download
            </Button>
          </div>
        </Card>
      )}
    </div>
  );
}
